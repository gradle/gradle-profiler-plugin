long diff = System.nanoTime()

String asyncProfilerHome = '%async.profiler.location%'
String asyncProfilerScript = "$asyncProfilerHome/profiler.sh"
File preferencesFile = new File('%global.preferences.file%')

if (preferencesFile.exists()) {
    // Workaround to obtain the PID. The ProcessHandle class is available since Java 9 only
    java.lang.management.RuntimeMXBean runtime = java.lang.management.ManagementFactory.getRuntimeMXBean();
    java.lang.reflect.Field jvm = runtime.getClass().getDeclaredField("jvm");
    jvm.setAccessible(true);
    sun.management.VMManagement mgmt = (sun.management.VMManagement) jvm.get(runtime);
    java.lang.reflect.Method pid_method = mgmt.getClass().getDeclaredMethod("getProcessId");
    pid_method.setAccessible(true);

    def pid = (Integer) pid_method.invoke(mgmt);

    // Will be called multiple times for composite builds (does not cause any problems)
    def startCommand = "$asyncProfilerScript start %async.profiler.parameters% $pid"
    def startOutput = startCommand.execute()

    // printing the output in `projectEvaluated` as in here as we have access to the root project here
    gradle.projectsEvaluated {
        if (preferencesFile.exists() && preferencesFile.text.contains(gradle.rootProject.projectDir.absolutePath)) {
            def shouldSaveProfiling = !gradle.startParameter.taskNames.find { it.contains('disableProfiling') }

            if (shouldSaveProfiling) {
                def logger = gradle.rootProject.logger
                logger.info "[Profiler] Preferences file: $preferencesFile"
                logger.info "[Profiler] Start command: $startCommand"
                logger.info "[Profiler] Start command output: $startOutput"
                verifyLinuxPerfEvents(logger)
                logger.lifecycle "[Profiler] Started profiling Gradle (pid=$pid)"
            }

            // stop the profiling when the build finishes
            gradle.buildFinished {
                diff = System.nanoTime() - diff
                diff = (long) (diff / 1000000)

                def profilesDir = new File('/tmp/profiles')
                profilesDir.mkdirs()
                int i = 1
                File profileFile
                while ((profileFile = new File(profilesDir, "gradle-profile-${i}.collapsed")).exists()) {
                    i++
                }

                if (shouldSaveProfiling) {
                    def stopCommand = "$asyncProfilerScript stop -f ${profileFile.absolutePath} $pid"
                    def detailsFile = new File(profilesDir, "gradle-profile-" + i + ".details")
                    detailsFile.text = "Gradle finished in $diff milliseconds\n" +
                            "pid: $pid\n";

                    def stopCommandOutput =  stopCommand.execute()
                    def logger = gradle.rootProject.logger
                    logger.info "[Profiler] Stop command: $stopCommand"
                    logger.info "[Profiler] Stop command output: $stopCommandOutput"
                    logger.lifecycle "[Profiler] Finished profiling Gradle (pid=$pid). Execution took $diff milliseconds. Results saved at ${profileFile.absolutePath}."
                } else {
                    "$asyncProfilerScript stop $pid".execute()
                }
            }
        }
    }
}

def verifyLinuxPerfEvents(def logger) {
    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        def perfEventParanoid = new File('/proc/sys/kernel/perf_event_paranoid').text
        def kptrRestrict = new File('/proc/sys/kernel/kptr_restrict').text
        if (perfEventParanoid != '1' || kptrRestrict != '0') {
            // instructions from https://github.com/jvm-profiling-tools/async-profiler#basic-usage
            logger.warn('[Profiler] Async profiler won\'t capture perf_events.\n' +
                    'To fix that, execute the following commands:\n' +
                    'echo 1 > /proc/sys/kernel/perf_event_paranoid\n' +
                    'echo 0 > /proc/sys/kernel/kptr_restrict')
        }
    }
}
